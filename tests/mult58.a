; mult58.a
; from codebase64, by litwr: https://www.codebase64.org/doku.php?id=base:another_fast_8bit_multiplication
; TobyLobster combined 8 bit results to make a 16 bit multiply, see mult16 for 8 bit version
;
; 16 bit x 16 bit unsigned multiply, 32 bit result
; Average cycles: 365.03
; 772 bytes


inputA = $02        ; 2 bytes (a0,a1)
inputB = $04        ; 2 bytes (b0,b1)
result = $06        ; 4 bytes

min         = $0a
result_low  = $0b


* = $0200

; align tables to page for speed
sqrlo
    !for i, 0, 255 {
        !byte <(i*i)
    }
sqrhi
    !for i, 0, 255 {
        !byte >(i*i)
    }

; ***************************************************************************************
; 16 bit x 16 bit unsigned multiply, 32 bit result
;
; On Entry:
;   inputA: multiplier   (2 bytes)
;   inputB: multiplicand (2 bytes)
;
; On Exit:
;   result: product (4 bytes)
mult
    ; (a0*b0) 8 bit multiply
    ldx inputB          ; 3
    lda inputA          ; 3
    sta min             ; 3
    sec                 ; 2
    sbc inputB          ; 3
    bcc +               ; 2/3

    ; inputA >= inputB
    stx min             ; 3
    ldx inputA          ; 3
    bcs ++              ; 3     ALWAYS branch

+
    ; inputA < inputB
    sbc #0              ; 2     also sets carry
    eor #255            ; 2
++
    tay
    lda sqrlo,x
    sbc sqrlo,y
    sta result
    lda sqrhi,x
    sbc sqrhi,y
    tay
    clc
    ldx min
    lda result
    adc sqrlo,x
    sta result
    tya
    adc sqrhi,x
    ror
    sta result+1        ; x is high byte
    ror result

    ; (a1*b0) 8 bit multiply
    ldx inputB          ; 3
    lda inputA+1        ; 3
    sta min             ; 3
    sec                 ; 2
    sbc inputB          ; 3
    bcc +               ; 2/3

    ; inputA >= inputB
    stx min             ; 3
    ldx inputA+1        ; 3
    bcs ++              ; 3     ALWAYS branch

+
    ; inputA < inputB
    sbc #0              ; 2     also sets carry
    eor #255            ; 2
++
    tay
    lda sqrlo,x
    sbc sqrlo,y
    sta result_low
    lda sqrhi,x
    sbc sqrhi,y
    tay
    clc
    ldx min
    lda result_low
    adc sqrlo,x
    sta result_low
    tya
    adc sqrhi,x
    ror
    tax
    lda result_low
    ror

    clc                 ;
    adc result+1        ;
    sta result+1        ;

    txa                 ;
    adc #0              ;
    sta result+2        ;

    ; (a0*b1) 8 bit multiply
    ldx inputB+1        ; 3
    lda inputA          ; 3
    sta min             ; 3
    sec                 ; 2
    sbc inputB+1        ; 3
    bcc +               ; 2/3

    ; inputA >= inputB
    stx min             ; 3
    ldx inputA          ; 3
    bcs ++              ; 3     ALWAYS branch

+
    ; inputA < inputB
    sbc #0              ; 2     also sets carry
    eor #255            ; 2
++
    tay
    lda sqrlo,x
    sbc sqrlo,y
    sta result_low
    lda sqrhi,x
    sbc sqrhi,y
    tay
    clc
    ldx min
    lda result_low
    adc sqrlo,x
    sta result_low
    tya
    adc sqrhi,x
    ror
    tax
    lda result_low
    ror

    clc                 ;
    adc result+1        ;
    sta result+1        ;
    txa                 ;
    adc result+2        ;
    sta result+2        ;

    lda #0              ;
    rol                 ; remember the carry for result+3
    sta result+3        ;

    ; (a1*b1) 8 bit multiply
    ldx inputB+1        ; 3
    lda inputA+1        ; 3
    sta min             ; 3
    sec                 ; 2
    sbc inputB+1        ; 3
    bcc +               ; 2/3

    ; inputA >= inputB
    stx min             ; 3
    ldx inputA+1        ; 3
    bcs ++              ; 3     ALWAYS branch

+
    ; inputA < inputB
    sbc #0              ; 2     also sets carry
    eor #255            ; 2
++
    tay
    lda sqrlo,x
    sbc sqrlo,y
    sta result_low
    lda sqrhi,x
    sbc sqrhi,y
    tay
    clc
    ldx min
    lda result_low
    adc sqrlo,x
    sta result_low
    tya
    adc sqrhi,x
    ror
    tax
    lda result_low
    ror

    clc                 ;
    adc result+2        ;
    sta result+2        ;
    txa                 ;
    adc result+3        ;
    sta result+3        ;
    rts                 ;
