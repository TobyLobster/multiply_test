; mult64.a
; based on Dr Jefyll, http://forum.6502.org/viewtopic.php?f=9&t=689&start=0#p19958
; - adjusted to use fixed zero page addresses
; - removed 'decrement to avoid clc' as this is slower on average
; - rearranged memory use to remove final memory copy and give LSB first order to result
; - removed temp zp storage bytes
; - unrolled the outer loop
; - unrolled the two inner loops fully
;
; 16 bit x 16 bit unsigned multiply, 32 bit result
; Average cycles: 400.00
; 299 bytes

multiplicand    = $02   ; 2 bytes
multiplier      = $04   ; 2 bytes
result          = $04   ; 4 bytes   (note: shares memory with multiplier)

* = $0200

; 16 bit x 16 bit unsigned multiply, 32 bit result
;
; On Entry:
;   (multiplier, multiplier+1): two byte multiplier, four bytes needed for result
;   (multiplicand, multiplicand+1): two byte multiplicand
; On Exit:
;   (result, result+1, result+2, result+3): product
;   preserves Y
mult
    lda #0              ;
    sta result+2        ; 16 bits of zero in A, result+2
                        ;  Note:    First 8 shifts are  A -> result+2 -> result
                        ;           Final 8 shifts are  A -> result+2 -> result+1

    ; --- 1st byte ---
    lsr result

    ; first time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result

    ; second time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result

    ; third time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result

    ; fourth time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result

    ; fifth time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result

    ; sixth time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result

    ; seventh time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result

    ; eighth time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result

    ; --- 2nd byte ---
    lsr result+1

    ; first time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result+1

    ; second time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result+1

    ; third time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result+1

    ; fourth time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result+1

    ; fifth time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result+1

    ; sixth time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result+1

    ; seventh time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result+1

    ; eighth time
    bcc +
    tax                 ; retain A
    lda result+2
    clc
    adc multiplicand
    sta result+2
    txa                 ; recall A
    adc multiplicand+1

+
    ror                 ; shift
    ror result+2
    ror result+1

    sta result+3        ; ms byte of hi-word of result
    rts
