; mult66.a
; from TobyLobster, based on Nick Jameson's 3D Demo for the BBC Micro (1994), https://github.com/simondotm/bbc-micro-3d/blob/master/source/culling.asm
; (see mult65.a)
;
; 8 bit x 8bit unsigned multiply, 16 bit result
; Average cycles: 45.50
; 1580 bytes

result          = $04   ; 2 bytes

lmul0           = $06   ; pointer into table 2 low
lmul1           = $08   ; pointer into table 2 high
prod_low        = $0a

* = $0200

; table1 = n*n/4, where n=0..510
; table2 = 0 if n=0 else (256-n)*(n-256)/4, where n=0..255

; Table 1 must be aligned to start of a page
squaretable1_lsb
    !for i, 0, 510 {
        !byte <((i*i)/4)
    }
    !byte 0     ; unused, needed for alignment of next table

squaretable1_msb
    !for i, 0, 510 {
        !byte >((i*i)/4)
    }
    !byte 0     ; unused, needed for alignment of next table

; Table 2 should be aligned to the start of a page for speed
squaretable2_lsb
    !byte 0
    !for i, 1, 255 {
        !byte <(((256-i)*(256-i))/4-1)
    }
squaretable2_msb
    !byte 0
    !for i, 1, 255 {
        !byte >(((256-i)*(256-i))/4-1)
    }



; Unsigned multiplication of two 8-bit terms is computed as:
;   if Y >= X:
;       r = table1[X+Y] - table1[Y-X]
;   else:
;       r = table1[X+Y] - table2[Y-X]
; where r is a 16-bit unsigned result
; and 'Y-X' is calculated as a single byte value (0 to 255)


; 8 bit x 8bit unsigned multiply, 16 bit result
;
; On Entry:
;  X: multiplier
;  Y: multiplicand
; On Exit:
;  (prod_low, A): product
mult
    stx lmul0
    stx lmul1
    tya
    sec
    sbc lmul0
    tax
    lda (lmul0),Y
    bcs +
    sbc squaretable2_lsb,X
    sta prod_low
    lda (lmul1),Y
    sbc squaretable2_msb,X
    rts

+
    sbc squaretable1_lsb,X
    sta prod_low
    lda (lmul1),Y
    sbc squaretable1_msb,X
    rts

; call this once to initialise high bytes of pointers to table
mult_init
    lda #>squaretable1_lsb          ; high byte (#2 in this instance)
    sta lmul0+1
    lda #>squaretable1_msb          ; high byte (#4 in this instance)
    sta lmul1+1
    rts
