; mult15.a
; from codebase64, by Repose: https://www.codebase64.org/doku.php?id=base:fastest_multiplication
;
; 16 bit x 16 bit unsigned multiply, 32 bit result
; Average cycles: 206.60
; 2181 bytes


; How to use:
; call jsr init, before first use
; put numbers in (x0,x1) and (y0,y1) and result is (Y, X, z1, z0)

; pointers to square tables
p_sqr_lo    = $8b   ; 2 bytes
p_sqr_hi    = $8d   ; 2 bytes
p_invsqr_lo = $8f   ; 2 bytes
p_invsqr_hi = $91   ; 2 bytes

; the inputs and outputs
x0  = $02    ; multiplier, 2 bytes
x1  = $03
y0  = $04    ; multiplicand, 2 bytes
y1  = $05
z0  = $06    ; product, 2 bytes + 2 registers
z1  = $07
; z2  = $08 returned in X reg
; z3  = $09 returned in Y reg

* = $0200

; Align tables to start of page
sqrlo
    !for i, 0, 511 {
        !byte <((i*i)/4)
    }
sqrhi
    !for i, 0, 511 {
        !byte >((i*i)/4)
    }

negsqrlo
    !for i, 0, 511 {
        !byte <(((255-i)*(255-i))/4)
    }

negsqrhi
    !for i, 0, 511 {
        !byte >(((255-i)*(255-i))/4)
    }

mult
    ; set multiplier as x0
    lda x0
    sta p_sqr_lo
    sta p_sqr_hi
    eor #$ff
    sta p_invsqr_lo
    sta p_invsqr_hi

    ldy y0
    sec
    lda (p_sqr_lo),y
    sbc (p_invsqr_lo),y         ;
    sta z0                      ; x0*y0l
    lda (p_sqr_hi),y
    sbc (p_invsqr_hi),y
    sta c1a+1                   ; x0*y0h
    ; c1a means column 1, row a (partial product to be added later)

    ldy y1
    ; sec                       ; notice that the high byte of sub above is always +ve
    lda (p_sqr_lo),y
    sbc (p_invsqr_lo),y
    sta c1b+1                   ; x0*y1l
    lda (p_sqr_hi),y
    sbc (p_invsqr_hi),y
    sta c2a+1                   ; x0*y1h

    ; set multiplier as x1
    lda x1
    sta p_sqr_lo
    sta p_sqr_hi
    eor #$ff
    sta p_invsqr_lo
    sta p_invsqr_hi

    ldy y0
    ; sec
    lda (p_sqr_lo),y
    sbc (p_invsqr_lo),y
    sta c1c+1                   ; x1*y0l
    lda (p_sqr_hi),y
    sbc (p_invsqr_hi),y
    sta c2b+1                   ; x1*y1h

    ldy y1
    ; sec
    lda (p_sqr_lo),y
    sbc (p_invsqr_lo),y
    sta c2c+1                   ; x1*y1l
    lda (p_sqr_hi),y
    sbc (p_invsqr_hi),y
    tay                         ; x1*y1h     ; Y=z3

    ; jmp do_adds               ; can put do_adds in zp for a slight speed increase
do_adds
    ; add the first two numbers of column 1
	clc
c1a
    lda #0
c1b
    adc #0
	sta z1                      ;

    ; continue to first two numbers of column 2
c2a
    lda #0
c2b
	adc #0
	tax                         ; X=z2
	bcc c1c                     ;
	iny                         ; z3++
	clc

    ; add last number of column 1
c1c
    lda #0
	adc z1
	sta z1                      ;

    ; add last number of column 2
	txa                         ; A=z2
c2c
    adc #0
	tax                         ; X=z2
	bcc fin                     ;
	iny                         ; z3++

    ; Y=z3, X=z2
fin
    rts

; Diagram of the additions
;                 y1    y0
;              x  x1    x0
;                 --------
;              x0y0h x0y0l
; +      x0y1h x0y1l
; +      x1y0h x1y0l
; +x1y1h x1y1l
; ------------------------
;     z3    z2    z1    z0


; Once only initialisation
; this could set up the pointer values in a loop to save memory
; it could also generate the square tables in code rather than load them
init
    lda #>sqrlo
    sta p_sqr_lo+1

    lda #>sqrhi
    sta p_sqr_hi+1

    lda #>negsqrlo
    sta p_invsqr_lo+1

    lda #>negsqrhi
    sta p_invsqr_hi+1
    rts
